import http from "../http-common";
import { jwtDecode } from "jwt-decode";

// üìå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const getAuthHeaders = () => {
  const token = localStorage.getItem("token");
  if (!token) throw new Error("No token found");

  return { Authorization: `Bearer ${token}` };
};

// ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô
const getUserReadingList = async () => {
  try {
    const token = localStorage.getItem("token");
    if (!token) throw new Error("No token found");

    const decoded = jwtDecode(token);
    const userId = decoded.userId;

    if (!userId) {
      console.error("‚ùå Invalid userId from token:", decoded);
      throw new Error("Invalid user_id from token");
    }

    const response = await http.get(`/readings/${userId}`, {
      headers: getAuthHeaders(),
    });

    return response.data;
  } catch (error) {
    console.error("‚ùå Error fetching user reading list:", error.response?.data || error.message);
    throw error;
  }
};

// üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏•‡∏á Reading List
const addToReadingList = async (book_id) => {
  try {
    const token = localStorage.getItem("token");
    if (!token) {
      console.error("‚ùå No token found in localStorage");
      throw new Error("No token found");
    }

    const decoded = jwtDecode(token);
    const user_id = decoded.userId;

    if (!user_id) {
      console.error("‚ùå Decoded token does not contain a valid user_id:", decoded);
      throw new Error("Invalid user_id from token");
    }

    console.log("üìå Sending request with:", { user_id, book_id });

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á
    const response = await http.post(
      "/readings",
      { user_id, book_id, status: "TO_READ" },
      { headers: { Authorization: `Bearer ${token}` } }
    );

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö
    if (response.data) {
      console.log("üìå Book added successfully, now incrementing count...");

      await http.put(
        `/books/increment-added-to-list/${book_id}`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );

      console.log("‚úÖ Successfully incremented book add count");
    }

    return response.data;
  } catch (error) {
    console.error("‚ùå Error adding to reading list:", error.response?.data || error.message);
    throw error;
  }
};

const startReading = async (reading_id) => {
  try {
    const token = localStorage.getItem("token");
    if (!token) throw new Error("No token found");

    const response = await http.patch(`/readings/${reading_id}/start`, {}, {
      headers: { Authorization: `Bearer ${token}` },
    });

    return response.data;
  } catch (error) {
    console.error("‚ùå Error starting reading:", error.response?.data || error.message);
    throw error;
  }
};

const finishReading = async (reading_id) => {
  try {
    const token = localStorage.getItem("token");
    if (!token) throw new Error("No token found");

    const response = await http.patch(`/readings/${reading_id}/finish`,{}, {
      headers: { Authorization: `Bearer ${token}` },
    });

    return response.data;
  } catch (error) {
    console.error("‚ùå Error finishing reading:", error.response?.data || error.message);
    throw error;
  }
};
// üìå ‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Reading List
const removeFromReadingList = async (reading_id) => {
  try {
    const token = localStorage.getItem("token");
    if (!token) throw new Error("No token found");

    const response = await http.delete(`/readings/${reading_id}`, {
      headers: { Authorization: `Bearer ${token}` },
    });

    return response.data;
  } catch (error) {
    console.error("‚ùå Error removing from reading list:", error.response?.data || error.message);
    throw error;
  }
};

const ReadingListService = {
  getUserReadingList,
  addToReadingList,
  startReading,
  finishReading,
  removeFromReadingList,
};

export default ReadingListService;